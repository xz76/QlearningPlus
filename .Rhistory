library(QlearningPlus)
data(tmp)
data(formula_list)
fit_q <- multi_dtr(
data = tmp, stages = 2, method = "Qlearning",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
knitr::opts_chunk$set(
message = FALSE, warning = FALSE
)
library(QlearningPlus)
data(tmp)
data(formula_list)
formula_list
fit_q <- multi_dtr(
data = tmp, stages = 2, method = "Qlearning",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_lasso <- multi_dtr(
data = tmp, stages = 2, method = "Lasso",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_bayes <- multi_dtr(
data = tmp, stages = 2, method = "BayesianQ",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
library(keras)
library(tensorflow)
fit_bayes <- multi_dtr(
data = tmp, stages = 2, method = "BayesianQ",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
reticulate::py_last_error()
?QlearningPlus::multi_dtr()
summary(fit_bayes[[2]])
fit_bayes[[2]]$recommend
table(fit_bayes[[2]]$recommend)
plot_dtr_forest(fit_bayes[[1]], method = "BayesianQ")
library(ggplot2)
plot_dtr_forest(fit_bayes[[1]], method = "BayesianQ")
plot_dtr_forest(fit_lasso[[1]], method = "Lasso")
dtr_gof(fit_lasso[[1]], outcome = "Y1")
qlearning_gof_plot(fit_q[[1]], outcome = "Y1")
devtools::install_github("xz76/QlearningPlus")
devtools::install_github("xz76/QlearningPlus", force = TRUE)
library(QlearningPlus)
?QlearningPlus::dtr_gof()
devtools::install_github("xz76/QlearningPlus")
library(QlearningPlus)
knitr::opts_chunk$set(
message = FALSE, warning = FALSE
)
data(tmp)
data(formula_list)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
library(keras)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
library(tensorflow)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
view(qlearning_bayes())
library(QlearningPlus)
?fit_cvae_encoder
knitr::opts_chunk$set(
message = FALSE, warning = FALSE
)
library(QlearningPlus)
data(tmp)
data(formula_list)
fit_q <- multi_dtr(
data = tmp, stages = 2, method = "Qlearning",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_lasso <- multi_dtr(
data = tmp, stages = 2, method = "Lasso",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_bayes <- multi_dtr(
data = tmp, stages = 2, method = "BayesianQ",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
library(keras)
library(tensorflow)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
knitr::opts_chunk$set(
message = FALSE, warning = FALSE
)
library(QlearningPlus)
data(tmp)
data(formula_list)
library(keras)
library(tensorflow)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
remove.packages("QlearningPlus")
devtools::install_github("xz76/QlearningPlus")
library(QlearningPlus)
data(tmp)
data(formula_list)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
library(keras)
library(tensorflow)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
library(QlearningPlus)
knitr::opts_chunk$set(
message = FALSE, warning = FALSE
)
library(QlearningPlus)
data(tmp)
data(formula_list)
fit_q <- multi_dtr(
data = tmp, stages = 2, method = "Qlearning",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_lasso <- multi_dtr(
data = tmp, stages = 2, method = "Lasso",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_bayes <- multi_dtr(
data = tmp, stages = 2, method = "BayesianQ",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list,
epoch = 10
)
devtools::install_github("xz76/QlearningPlus")
library(QlearningPlus)
data(tmp)
data(formula_list)
fit_q <- multi_dtr(
data = tmp, stages = 2, method = "Qlearning",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_q <- multi_dtr(
data = tmp, stages = 2, method = "Qlearning",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_lasso <- multi_dtr(
data = tmp, stages = 2, method = "Lasso",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_bayes <- multi_dtr(
data = tmp, stages = 2, method = "BayesianQ",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
dtr_gof(fit_lasso[[1]], outcome = "Y1")
qlearning_gof_plot(fit_q[[1]], outcome = "Y1")
devtools::install_github("xz76/QlearningPlus")
library(QlearningPlus)
data(tmp)
data(formula_list)
fit_q <- multi_dtr(
data = tmp, stages = 2, method = "Qlearning",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_lasso <- multi_dtr(
data = tmp, stages = 2, method = "Lasso",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_bayes <- multi_dtr(
data = tmp, stages = 2, method = "BayesianQ",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list,
epoch = 3
)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list,
epochs = 3
)
remove.packages("QlearningPlus")
devtools::install_github("xz76/QlearningPlus")
library(QlearningPlus)
data(tmp)
data(formula_list)
fit_q <- multi_dtr(
data = tmp, stages = 2, method = "Qlearning",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_lasso <- multi_dtr(
data = tmp, stages = 2, method = "Lasso",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_bayes <- multi_dtr(
data = tmp, stages = 2, method = "BayesianQ",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list,
epochs = 3
)
knitr::opts_chunk$set(
message = FALSE, warning = FALSE
)
library(QlearningPlus)
data(tmp)
data(formula_list)
fit_q <- multi_dtr(
data = tmp, stages = 2, method = "Qlearning",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_lasso <- multi_dtr(
data = tmp, stages = 2, method = "Lasso",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_bayes <- multi_dtr(
data = tmp, stages = 2, method = "BayesianQ",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list,
epochs = 3
)
summary(fit_bayes[[2]])
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list,
epochs = 3
)
install.packages("ems")
data(icu)
# Some edition
icu$Saps3DeathProbabilityStandardEquation <- icu$Saps3DeathProbabilityStandardEquation / 100
library(ems)
install.packages("rms")
library(ems)
library(rms)
library(ems)
library(ems)
install.packages("rms")
install.packages("rms", type = "source")
library(rms)
# Install devtools if needed
install.packages("devtools")
# Install rms from GitHub
devtools::install_github("harrelfe/rms")
install.packages("installr")
library(installr)
updateR()   # will check, download, and install new R + copy packages
updateR()   # will check, download, and install new R + copy packages
library(rms)
install.packages("rms", type = "source")
R
version
install.packages("rms")
library(ems)
install.packages("ems")
library(ems)
data(icu)
# Some edition
icu$Saps3DeathProbabilityStandardEquation <- icu$Saps3DeathProbabilityStandardEquation / 100
icu <- icu[-which(icu$Unit == "F"),]
icu$myunits <- ifelse(icu$Unit == "A",1,0) #my units
icu <- droplevels(icu)
# Getting the cross-sectional arguments to use in funnel
x <- SMR.table(data = icu, group.var = "Unit",
obs.var = "UnitDischargeName", pred.var = "Saps3DeathProbabilityStandardEquation")
myunit_names <- unique(icu$Unit[which(icu$myunits == 1)])
x$myunits <- ifelse(x$Levels %in% myunit_names, 1,0)
# Analysis of proportions
f1 <- funnel(unit = x$Levels[-1], o = x[-1,]$Observed, theta = x$Observed[1] / x$N[1],
n = x[-1,]$N, method = "exact", myunits = x$myunits[-1], option = "prop", plot = FALSE)
f1
plot(f1, main = "Cross-sectional proportions")
f2 <- funnel(unit = x$Levels[-1], y = x[-1,]$SMR, method = "exact", direct = TRUE,
theta = x$SMR[1], e = x[-1,]$Expected, n = x[-1,]$N, o = x[-1,]$Observed,
option = "rate", plot = FALSE)
f2
plot(f2, main = "Cross-sectional rate (SMR)")
x
x$SMR[1]
install.packages("SLOS")
data(SampledData, package = "SLOS")
results <- predict_and_evaluate(sampled_data)
library(SLOS)
data(SampledData, package = "SLOS")
results <- predict_and_evaluate(sampled_data)
print(results$RMSE)
print(results$MAE)
print(results$R2)
results <- SLOS(sampled_data)
print(results$df_unit_slos)
plot(results$plot_SLOS_obs_prev)
plot(results$funnel_plot)
?SLOS
head(sampled_data)
unique(sampled_data$UnitCode)
test <- sampled_data[sampled_data$UnitCode == "ID992120", ]
predict_and_evaluate(test)
load_SLOSModel()
summary(sampled_data$UnitLengthStay)
setwd("~/Dropbox/career/review")
install.packages("readxl")
install.packages("ggplot2")
install.packages("tidyverse")
install.packages("gam")
install.packages("mgcv")
install.packages("nlme")
install.packages("dplyr")
install.packages("pROC")
install.packages("gtsummary")
install.packages("kableExtra")
install.packages("gt")
library(dtrSurv)
install.package("dtrSurv")
install.packages("dtrSurv")
library(dtrSurv)
??dtrSurv
dt <- data.frame("Y.1" = sample(1:100,100,TRUE), "Y.2" = sample(1:100,100,TRUE),
"D.1" = rbinom(100, 1, 0.9), "D.2" = rbinom(100,1,0.9),
"A.1" = rbinom(100, 1, 0.5), "A.2" = rbinom(100,1,0.5),
"X.1" = rnorm(100), "X.2" = rnorm(100))
dt
res <- dtrSurv(data = dt,
txName = c("A.1", "A.2"),
models = list(Surv(Y.1,D.1)~X.1+A.1, Surv(Y.2,D.2)~X.2+A.2+Y.1))
res[[1]]
res
res@stageResults
res@stageResults[[1]]
str(res@stageResults)
str(res@stageResults[[1]])
res@stageResults[[1]]@optimal
str(res@stageResults[[1]]@optimal)
res@stageResults[[1]]@optimal@optimalTx
143*12
18933*15
18933*15/10000*50
127*15
18250*4
knitr::opts_chunk$set(
message = FALSE, warning = FALSE
)
plot_dtr_forest(fit_bayes[[1]], method = "BayesianQ")
# Install dependencies
install.packages(c("glmnet",  "rstan", "keras", "tensorflow", "caret"))
keras::install_keras()
devtools::install_github("xz76/QlearningPlus")
install.packages("devtools")
devtools::install_github("xz76/QlearningPlus")
library(QlearningPlus)
data(tmp)
data(formula_list)
fit_q <- multi_dtr(
data = tmp, stages = 2, method = "Qlearning",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_lasso <- multi_dtr(
data = tmp, stages = 2, method = "Lasso",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
install.packages("glmnetUtils")
fit_lasso <- multi_dtr(
data = tmp, stages = 2, method = "Lasso",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_bayes <- multi_dtr(
data = tmp, stages = 2, method = "BayesianQ",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list
)
fit_cvae <- multi_dtr(
data = tmp, stages = 2, method = "CVAE",
treatment_prefix = "A",
outcome_list = c("Y1","Y2"),
formula_list = formula_list,
epochs = 3
)
summary(tmp)
formula_list
summary(fit_q)
str(fit_q)
summary(fit_bayes[[2]])
table(fit_bayes[[2]]$recommend)
22.5 * 1.02^30
40/12*26
160/12
15*1.12*0.94*(0.63)
15*1.12*0.94*(0.63)/12
15*1.12*0.94*(0.63)/26
95*0.25
93.8*0.25
92*0.25
4500-6300
4000*12
5、0.67
5/0.67
